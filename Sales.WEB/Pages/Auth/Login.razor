@page "/Login"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<div class="row">
    <div class="col-md-4  offset-md-4">
        <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />
            <div class="card bg-light">
                <div class="card-header justify-content-center">
                    <span>
                        <i class="oi oi-account-login" /> Iniciar Sesión
                        <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Iniciar Sesión</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@loginDTO.Email" />
                            <ValidationMessage For="@(() => loginDTO.Email)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" />
                            <ValidationMessage For="@(() => loginDTO.Password)" />
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <a class="bbtn btn-link" href="/ResendToken">Reenviar correro de activación de cuenta</a>
                    <p><a class="bbtn btn-link" href="/RecoverPassword">¿Has olvidado tu contraseña?</a></p>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] protected ServicioUsuario? ServicioUsuario { get; set; }
    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
        var responseHttp = await repository.Post<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        ServicioUsuario = new ServicioUsuario();
        var usuario = responseHttp.Response;
        ServicioUsuario.Email = usuario.Email;
        ServicioUsuario.TipoUsuario = usuario.TipoUsuario;
        ServicioUsuario.Empresa = usuario.EmpresaId;
        ServicioUsuario.UsuarioId = usuario.Id;

        await loginService.LoginAsync(responseHttp.Response!.Token);

        // Crear Cuentas
        await CrearCuentas(ServicioUsuario.Empresa);

        navigationManager.NavigateTo("/");
    }

    private async Task CrearCuentas(int empresaId) 
    {
        List<Cuenta> Cuentas = new List<Cuenta>();
        Cuenta cuenta = new Cuenta()
            {
                IdCuenta = 1,
                CodigoCuenta = "1",
                NombreCuenta = "DISPONIBLE",
                Nivel = "1",
                Estado = true,
                TipoBase = "1",
                EmpresaId = empresaId
            };
        Cuentas.Add(cuenta);
        var responseHttp2 = await repository.Post("api/Cuentas/CuentasBase", cuenta);
        if (responseHttp2.Error)
        {

        }
    }
}
